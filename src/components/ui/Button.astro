---
import type { HTMLTag, Polymorphic } from 'astro/types'

type Variants = 'default' | 'lg' | 'square'
type TagType = 'button' | 'a'

type Props<TagName extends HTMLTag = HTMLTag> = {
  variant?: Variants
  class?: string
} & Polymorphic<{ as: TagName & TagType }>

// Must declare 'as' type as any because Tag element not recognize the polymorhpic,
// this must be fixed removing the = HTMLTag in the Props type declaration,
// but it make all other props as any.
// NOTE: This issues only be relevant for the componet itself, and not in the implementation.
const {
  as: Tag = 'button' as any,
  class: customClass,
  variant = 'default',
  ...props
} = Astro.props

const variants: Record<Variants, string> = {
  default: 'size-min px-12',
  lg: 'size-min px-16',
  square: 'size-[30px] aspect-square',
}
---

<Tag
  class:list={[
    'whitespace-nowrap rounded bg-foreground bg-opacity-50 py-2 font-azeret text-sm font-light leading-none text-background outline-1 backdrop-blur-md duration-150 hover:bg-transparent hover:text-foreground hover:outline hover:outline-foreground',
    variants[variant],
    customClass,
  ]}
  {...props}>
  <slot />
</Tag>
